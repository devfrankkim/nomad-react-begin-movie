{"version":3,"sources":["Movie.js","MovieApp.js","index.js"],"names":["Movie","year","title","summary","poster","genres","className","src","alt","map","genre","index","key","slice","MovieApp","state","isLoading","movies","getMovies","a","axios","get","data","setState","this","movie","id","medium_cover_image","React","Component","ReactDOM","render","document","getElementById"],"mappings":"kUAiCeA,MA7Bf,YAA0D,IAAzCC,EAAwC,EAAxCA,KAAMC,EAAkC,EAAlCA,MAAOC,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,OAAQC,EAAU,EAAVA,OAC7C,OACE,yBAAKC,UAAU,SACb,yBAAKC,IAAKH,EAAQI,IAAKN,EAAOA,MAAOA,IACrC,yBAAKI,UAAU,cACb,wBAAIA,UAAU,eAAeJ,GAC7B,wBAAII,UAAU,cAAcL,GAC5B,wBAAIK,UAAU,gBACXD,EAAOI,KAAI,SAACC,EAAOC,GAAR,OACV,wBAAIC,IAAKD,EAAOL,UAAU,gBACvBI,MAGL,uBAAGJ,UAAU,kBAAkBH,EAAQU,MAAM,EAAG,KAAhD,WCkCKC,G,iNA7CbC,MAAQ,CACNC,WAAW,EACXC,OAAQ,I,EAEVC,U,sBAAY,8BAAAC,EAAA,sEAKAC,IAAMC,IACd,4DANQ,gBAGEJ,EAHF,EAERK,KACEA,KAAQL,OAKZ,EAAKM,SAAS,CAAEN,OAAQA,EAAQD,WAAW,IARjC,2C,mFAWVQ,KAAKN,c,+BAEG,IAAD,EACuBM,KAAKT,MAA3BC,EADD,EACCA,UAAWC,EADZ,EACYA,OACnB,OACE,6BAASX,UAAU,aAChBU,EACC,yBAAKV,UAAU,UACb,0BAAMA,UAAU,eAAhB,eAGF,yBAAKA,UAAU,UACZW,EAAOR,KAAI,SAAAgB,GAAK,OACf,kBAAC,EAAD,CACEb,IAAKa,EAAMC,GACXA,GAAID,EAAMC,GACVzB,KAAMwB,EAAMxB,KACZC,MAAOuB,EAAMvB,MACbC,QAASsB,EAAMtB,QACfC,OAAQqB,EAAME,mBACdtB,OAAQoB,EAAMpB,kB,GApCPuB,IAAMC,YCD7BC,IAASC,OAAO,kBAAC,EAAD,MAAcC,SAASC,eAAe,a","file":"static/js/main.1c320858.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./Movie.css\";\n\nfunction Movie({ year, title, summary, poster, genres }) {\n  return (\n    <div className=\"movie\">\n      <img src={poster} alt={title} title={title} />\n      <div className=\"movie_data\">\n        <h3 className=\"movie_title\">{title}</h3>\n        <h4 className=\"movie_year\">{year}</h4>\n        <ul className=\"movie_genres\">\n          {genres.map((genre, index) => (\n            <li key={index} className=\"genres_genre\">\n              {genre}\n            </li>\n          ))}\n          <p className=\"mo vie_summary\">{summary.slice(0, 100)}...</p>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nMovie.propTypes = {\n  id: PropTypes.number.isRequired,\n  year: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n  summary: PropTypes.string.isRequired,\n  poster: PropTypes.string.isRequired,\n  genres: PropTypes.arrayOf(PropTypes.string).isRequired\n};\n\nexport default Movie;\n\n/*\n    Movie component doesn't need state\n    so we can use function() \n\n    중요한건, 얻어 올 props를 찾기 시작하는 것이다.\n\n        ==============================================\n        Movie render해서 보여준다 => 뭘 보여줄 것인가? api를 가져와서 => 화면에 해당 컨텐츠를 보여줄 것이다.\n        => 어떤 컨텐츠를 가져올 것인가? id, year, title, summary, poster 등\n\n        => propTypes를 사용하여 가져올 컨텐츠를 변수로 담아둔다. ex(1)\n        => Movie 컴포넌트로 사용 할 변수를 파라미터를 통해 불러온다. ex(2)\n        => 컴포넌트에서 return을 해줘서 사용 할 변수를 렌더 한다. ex(3)\n        => export default Movie를 하여,  MovieApp에서 Movie 렌더 설정을 해준다.\n        => two options (use renderMovies() OR use map())\n        => this.state.movies === (const { movies } = this.state)\n        => map() =>  return() 을 통하여 렌더링을 해준다. ex(4)\n        => map() function은 또 다른 argument를 전달해준다. (current item, item number)\n\n\n        ex(1)\n            Movie.propTypes = {\n            id: PropTypes.number.isRequired,\n            year: PropTypes.number.isRequired,\n            title: PropTypes.string.isRequired,\n            summary: PropTypes.string.isRequired,\n            poster: PropTypes.string.isRequired\n            }\n\n        ex(2)\n            function Movie({id, year, title, summary, poster}){\n                \n            }\n\n        ex(3)\n            function Movie({id, year, title, summary, poster}){\n                <>\n                <h5>[id : {id}]</h5>\n                <h2>{year}년도</h2>\n                <h2>{title}</h2>\n                <h3>{summary}</h3>\n                <h4>{poster}</h4>\n                </>\n            }\n\n        ex(4)\n        \n            movies.map(movie => \n                return (              \n                    <Movie\n                    key={movie.id}\n                    id={movie.id}\n                    year={movie.year}\n                    title={movie.title}\n                    summary={movie.summary}\n                    poster={movie.medium_cover_image}\n                />\n                )\n            )\n*/\n","import React from \"react\";\nimport axios from \"axios\";\nimport Movie from \"./Movie\";\nimport \"./MovieApp.css\";\n\nclass MovieApp extends React.Component {\n  state = {\n    isLoading: true,\n    movies: []\n  };\n  getMovies = async () => {\n    const {\n      data: {\n        data: { movies }\n      }\n    } = await axios.get(\n      \"https://yts-proxy.now.sh/list_movies.json?sort_by=rating\"\n    );\n    this.setState({ movies: movies, isLoading: false });\n  };\n  componentDidMount() {\n    this.getMovies();\n  }\n  render() {\n    const { isLoading, movies } = this.state;\n    return (\n      <section className=\"container\">\n        {isLoading ? (\n          <div className=\"loader\">\n            <span className=\"loader_text\">Loading...</span>\n          </div>\n        ) : (\n          <div className=\"movies\">\n            {movies.map(movie => (\n              <Movie\n                key={movie.id}\n                id={movie.id}\n                year={movie.year}\n                title={movie.title}\n                summary={movie.summary}\n                poster={movie.medium_cover_image}\n                genres={movie.genres}\n              />\n            ))}\n          </div>\n        )}\n      </section>\n    );\n  }\n}\n\nexport default MovieApp;\n\n/*\n  javascript ternary operator(삼항연산자). \n\n  isLoading은 정의 되지 않아서 사용 불가 하다. => this.state 사용해야만 한다.\n\n  Quiz...\n  처음에 render하면 호출되는 life cycle method \n  => componentDidMount() \n\n*/\n\n/*\n  componentDidMount에서 data를 fetch한다. API로 부터 data fetching이 완료되면, \n  \"we are ready\" 대신에  => map으로 movie를 render()  \n\n  **** 미래에 쓰고자 하는 state를 선언하는 건 필수가 아니다.****\n  this.setState({ icecream: true, bread: false, pizza: true }) \n  \n  ****setState****는 default 값들을 선언해주지 않아도 에러가 뜨지 않는다.\n  (future.state)\n  따라서, state안에 default 값들을 선언할 필요가 없다.\n\n\n  일반적으로 사람들이 JavaScript에서 data를 fetch하는 방법은 fetch를 사용함.\n\n  axios는 마치 fetch 위에 있는 작은 layer.\n  ex) 땅콩 주위에 있는 greate chocolate.\n  => npm i axios\n\n  axios는 느리다.\n\n ******\n component가 mount되면 getMovie()를 호출한다.\n\n // map을 사용할 땐, always return을 해줘야 한다\n\n  \n    async() => wait for it. \n    await => hey, what do you want me to wait for? \n    => wait for axius to finish. and then continue.\n\n        this.setState({movies : movies})\n        (setState(movies) : axios(movies));\n\n  \n\n*/\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport MovieApp from \"./MovieApp\";\n\nReactDOM.render(<MovieApp />, document.getElementById(\"potato\"));\n\n// render only 1 Component\n//\n"],"sourceRoot":""}